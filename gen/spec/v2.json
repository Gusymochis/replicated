{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Vendor API is available as an alternative to configuring your application via the Vendor website.\nThis API will allow you as the Vendor to manage your apps and app configuration, manage customer\nlicenses, view your private container images.\n\nThe API can be accessed at the URL https://api.replicated.com/vendor/v2.\n\n== Authentication\n\nAuthentication is achieved via a token that can be generated via the Vendor website. You can create a new token by clicking the New API Token button in the API Tokens table. You must give this token a nickname before saving.\n\nAfter you have generated your token, you will need to send this token in the Authorization header of your requests to the Vendor API.\n\nThe following Error response codes can be expected:\n\n[options=\"header\", cols=\".^1,.^3,.^10\"]\n|===\n|Code|Response|Description\n|400|Bad Request|We were unable to parse your request.\n|401|Unauthorized|Confirm that your token or username/password is valid.\n|403|Forbidden|The server is refusing to alloo you to complete this request.\n|404|Not found|The requested resource was not found.\n|409|Conflict|The action would result in a conflict and is being rejected.\n|500|Internal Server Error|Something unexpected happened.\n|===\n\nYou download JSON schemas for this API in our github repo.\n\nCheck out our Developer Help Center for sample recipes on using our Vendor API",
    "title": "Vendor API V2",
    "contact": {
      "name": "Replicated, Inc.",
      "url": "http://www.replicated.com/",
      "email": "info@replicated.com"
    },
    "version": "1.0.0"
  },
  "host": "api.replicated.com",
  "basePath": "/vendor/v2",
  "paths": {
    "/app/{app_id}/licenses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "app",
          "licenses"
        ],
        "summary": "List all licenses for a given appId.",
        "operationId": "listAppLicenses",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listAppLicensesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          }
        }
      }
    },
    "/app/{app_id}/licenses/search": {
      "post": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "app",
          "licenses"
        ],
        "summary": "Search all licenses for a given appId.",
        "operationId": "searchAppLicenses",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Search licenses parameters.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "query"
              ],
              "properties": {
                "include_active": {
                  "type": "boolean",
                  "x-go-name": "IncludeActive"
                },
                "include_archived": {
                  "type": "boolean",
                  "x-go-name": "IncludeArchived"
                },
                "include_dev": {
                  "type": "boolean",
                  "x-go-name": "IncludeDev"
                },
                "include_inactive": {
                  "type": "boolean",
                  "x-go-name": "IncludeInactive"
                },
                "include_paid": {
                  "type": "boolean",
                  "x-go-name": "IncludePaid"
                },
                "include_trial": {
                  "type": "boolean",
                  "x-go-name": "IncludeTrial"
                },
                "offset": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Offset"
                },
                "page_size": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "PageSize"
                },
                "query": {
                  "type": "string",
                  "x-go-name": "Query"
                },
                "sort_direction": {
                  "type": "string",
                  "x-go-name": "SortDirection"
                },
                "sort_field": {
                  "type": "string",
                  "x-go-name": "SortField"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/searchAppLicensesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          }
        }
      }
    },
    "/license": {
      "post": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "license"
        ],
        "summary": "Create a license.",
        "operationId": "createLicense",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "license_type",
                "assignee",
                "app_id",
                "channel_id",
                "field_values",
                "require_activation",
                "activation_email",
                "update_policy",
                "expiration_date",
                "expiration_policy"
              ],
              "properties": {
                "activation_email": {
                  "description": "If activation is required this is the email the code will be sent to.",
                  "type": "string",
                  "x-go-name": "ActivationEmail"
                },
                "app_id": {
                  "description": "App Id that this license will be associated with.",
                  "type": "string",
                  "x-go-name": "AppID"
                },
                "assignee": {
                  "description": "License Label name, ie name of customer who is using license.",
                  "type": "string",
                  "x-go-name": "Assignee"
                },
                "channel_id": {
                  "description": "Channel id that the license will be associated with (deprecated, use \"channels\").",
                  "type": "string",
                  "x-go-name": "ChannelID"
                },
                "channels": {
                  "$ref": "#/definitions/LicenseChannels"
                },
                "console_auth_options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "ConsoleAuthOptions"
                },
                "enabled_features": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "x-go-name": "EnabledFeatures"
                },
                "expiration_date": {
                  "description": "Date that the license will expire, can be null for no expiration or formatted by year-month-day ex. 2016-02-02.",
                  "type": "string",
                  "x-go-name": "ExpirationDate"
                },
                "expiration_policy": {
                  "description": "Defines expiration policy for this license.\n\nValues:\nignore: replicated will take no action on a expired license\nnoupdate-norestart: application updates will not be downloaded, and once the application is stopped, it will not be started again\nnoupdate-stop: application updates will not be downloaded and the application will be stopped",
                  "type": "string",
                  "x-go-name": "ExpirationPolicy"
                },
                "field_values": {
                  "$ref": "#/definitions/LicenseFieldValues"
                },
                "license_type": {
                  "description": "LicenseType can be set to \"dev\", \"trial\", or \"prod\"",
                  "type": "string",
                  "x-go-name": "LicenseType"
                },
                "require_activation": {
                  "description": "If this license requires activation set to true, make sure to set activation email as well.",
                  "type": "boolean",
                  "x-go-name": "RequireActivation"
                },
                "update_policy": {
                  "description": "If set to automatic will auto update remote license installation with every release. If set to manual will update only when on-premise admin clicks the install update button.",
                  "type": "string",
                  "x-go-name": "UpdatePolicy"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createLicenseResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/license/{license_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "license"
        ],
        "summary": "Get app license for a given licenseId.",
        "operationId": "getLicense",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "x-go-name": "LicenseID",
            "description": "License identifier",
            "name": "license_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getLicenseResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      },
      "put": {
        "description": "Note: that all fields are required to be passed or they will be overwritten to blank or default values.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "summary": "Update app license for a given licenseId.",
        "operationId": "updateLicense",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "x-go-name": "LicenseID",
            "description": "License identifier",
            "name": "license_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "license_type",
                "assignee",
                "channel_id",
                "field_values",
                "require_activation",
                "activation_email",
                "update_policy",
                "expiration_date",
                "expiration_policy"
              ],
              "properties": {
                "activation_email": {
                  "description": "If activation is required this is the email the code will be sent to.",
                  "type": "string",
                  "x-go-name": "ActivationEmail"
                },
                "assignee": {
                  "description": "License Label name, ie name of customer who is using license.",
                  "type": "string",
                  "x-go-name": "Assignee"
                },
                "channel_id": {
                  "description": "Channel id that the license will be associated with.",
                  "type": "string",
                  "x-go-name": "ChannelID"
                },
                "channels": {
                  "$ref": "#/definitions/LicenseChannels"
                },
                "console_auth_options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "ConsoleAuthOptions"
                },
                "enabled_features": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "x-go-name": "EnabledFeatures"
                },
                "expiration_date": {
                  "description": "Date that the license will expire, can be null for no expiration or formated by year-month-day ex. 2016-02-02.",
                  "type": "string",
                  "x-go-name": "ExpirationDate"
                },
                "expiration_policy": {
                  "description": "Defines expiration policy for this license.\n\nValues:\nignore: replicated will take no action on a expired license\nnoupdate-norestart: application updates will not be downloaded, and once the application is stopped, it will not be started again\nnoupdate-stop: application updates will not be downloaded and the application will be stopped",
                  "type": "string",
                  "x-go-name": "ExpirationPolicy"
                },
                "field_values": {
                  "$ref": "#/definitions/LicenseFieldValues"
                },
                "is_app_version_locked": {
                  "description": "A license can be optionally locked to a specific release",
                  "type": "boolean",
                  "x-go-name": "IsAppVersionLocked"
                },
                "license_type": {
                  "description": "LicenseType can be set to \"dev\", \"trial\", or \"prod\"",
                  "type": "string",
                  "x-go-name": "LicenseType"
                },
                "locked_app_version": {
                  "description": "If app version is locked, this is the version to lock it to (sequence)",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "LockedAppVersion"
                },
                "require_activation": {
                  "description": "If this license requires activation set to true, make sure to set activation email as well.",
                  "type": "boolean",
                  "x-go-name": "RequireActivation"
                },
                "update_policy": {
                  "description": "If set to automatic will auto update remote license installation with every release. If set to manual will update only when on-premise admin clicks the install update button.",
                  "type": "string",
                  "x-go-name": "UpdatePolicy"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateLicenseResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/licenses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "licenses"
        ],
        "summary": "Lists all licenses.",
        "operationId": "licenses",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listLicensesResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "LicenseChannel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "is_default": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/replicatedcom/vendor-api/handlers/replv2"
    },
    "LicenseChannels": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LicenseChannel"
      },
      "x-go-package": "github.com/replicatedcom/vendor-api/handlers/replv2"
    },
    "LicenseFieldValue": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "x-go-name": "FieldName"
        },
        "title": {
          "type": "string",
          "x-go-name": "FieldTitle"
        },
        "type": {
          "type": "string",
          "x-go-name": "FieldType"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/replicatedcom/vendor-api/handlers/replv2"
    },
    "LicenseFieldValues": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LicenseFieldValue"
      },
      "x-go-package": "github.com/replicatedcom/vendor-api/handlers/replv2"
    },
    "LicenseV2": {
      "type": "object",
      "properties": {
        "activation_email": {
          "type": "string",
          "x-go-name": "ActivationEmail"
        },
        "active_instance_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActiveInstanceCount"
        },
        "app_id": {
          "type": "string",
          "x-go-name": "AppID"
        },
        "app_status": {
          "type": "string",
          "x-go-name": "AppStatus"
        },
        "assignee": {
          "type": "string",
          "x-go-name": "Assignee"
        },
        "billing_begin_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "BillingBeginDate"
        },
        "billing_end_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "BillingEndDate"
        },
        "billing_frequency": {
          "type": "string",
          "x-go-name": "BillingFrequency"
        },
        "billing_revenue": {
          "type": "string",
          "x-go-name": "BillingRevenue"
        },
        "channel_id": {
          "type": "string",
          "x-go-name": "ChannelID"
        },
        "channel_name": {
          "type": "string",
          "x-go-name": "ChannelName"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseChannel"
          },
          "x-go-name": "Channels"
        },
        "cloud_networks": {
          "type": "string",
          "x-go-name": "CloudNetworks"
        },
        "console_auth_options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ConsoleAuthOptions"
        },
        "enabled_features": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "EnabledFeatures"
        },
        "expiration_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpirationDate"
        },
        "expiration_policy": {
          "type": "string",
          "x-go-name": "ExpirationPolicy"
        },
        "grant_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "GrantDate"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "inactive_instance_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InactiveInstanceCount"
        },
        "installed_release_sequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstalledReleaseSequence"
        },
        "installed_version_label": {
          "type": "string",
          "x-go-name": "InstalledVersionLabel"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "is_anonymous": {
          "type": "boolean",
          "x-go-name": "IsAnonymous"
        },
        "is_app_version_locked": {
          "type": "boolean",
          "x-go-name": "IsAppVersionLocked"
        },
        "is_archived": {
          "type": "boolean",
          "x-go-name": "IsArchived"
        },
        "is_instance_tracked": {
          "type": "boolean",
          "x-go-name": "IsInstanceTracked"
        },
        "last_sync_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastSyncAt"
        },
        "latest_release_sequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LatestReleaseSequence"
        },
        "latest_version_label": {
          "type": "string",
          "x-go-name": "LatestVersionLabel"
        },
        "license_type": {
          "type": "string",
          "x-go-name": "LicenseType"
        },
        "locked_app_version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LockedAppVersion"
        },
        "require_activation": {
          "type": "boolean",
          "x-go-name": "RequireActivation"
        },
        "revocation_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "RevocationDate"
        },
        "untracked_instance_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UntrackedInstanceCount"
        },
        "update_policy": {
          "type": "string",
          "x-go-name": "UpdatePolicy"
        }
      },
      "x-go-package": "github.com/replicatedcom/vendor-api/handlers/replv2"
    },
    "LicensesV2": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LicenseV2"
      },
      "x-go-package": "github.com/replicatedcom/vendor-api/handlers/replv2"
    }
  },
  "responses": {
    "createLicenseResponse": {
      "description": "CreateLicenseResponse contains the created license",
      "schema": {
        "type": "object",
        "properties": {
          "License": {
            "$ref": "#/definitions/LicenseV2"
          }
        }
      }
    },
    "getLicenseResponse": {
      "description": "GetLicenseResponse contains the returned license",
      "schema": {
        "type": "object",
        "required": [
          "License"
        ],
        "properties": {
          "License": {
            "$ref": "#/definitions/LicenseV2"
          }
        }
      }
    },
    "listAppLicensesResponse": {
      "description": "ListAppLicensesResponse contains the list of licenses",
      "schema": {
        "type": "object",
        "properties": {
          "Licenses": {
            "$ref": "#/definitions/LicensesV2"
          }
        }
      }
    },
    "listLicensesResponse": {
      "description": "ListLicensesResponse contains the parameters needed to call list licenses",
      "schema": {
        "type": "object",
        "properties": {
          "Licenses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LicenseV2"
            }
          }
        }
      }
    },
    "responseErrBadRequest": {
      "description": "Returned on bad input"
    },
    "responseErrConflict": {
      "description": "Returned on a conflict"
    },
    "responseErrForbidden": {
      "description": "Returned if the caller does not have the needed permission"
    },
    "responseErrNotFound": {
      "description": "Returned on resource not found"
    },
    "responseErrUnauthorized": {
      "description": "Return if the caller is not authorized"
    },
    "responseNoContent": {
      "description": "On success, no payload returned"
    },
    "responseOk": {
      "description": "On success"
    },
    "searchAppLicensesResponse": {
      "description": "SearchAppLicensesResponse contains the list of licenses",
      "schema": {
        "type": "object",
        "properties": {
          "licenses": {
            "$ref": "#/definitions/LicensesV2"
          },
          "query": {
            "type": "string",
            "x-go-name": "Query"
          },
          "total_hits": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TotalHits"
          }
        }
      }
    },
    "updateLicenseResponse": {
      "description": "UpdateLicenseResponse contains the license",
      "schema": {
        "type": "object",
        "required": [
          "License"
        ],
        "properties": {
          "License": {
            "$ref": "#/definitions/LicenseV2"
          }
        }
      }
    }
  }
}